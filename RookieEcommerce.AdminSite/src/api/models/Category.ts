/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
    ProductToJSONTyped,
} from './Product';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Category
     */
    createdDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Category
     */
    modifiedDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    parentCategoryId?: string | null;
    /**
     * 
     * @type {Category}
     * @memberof Category
     */
    parentCategory?: Category;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Category
     */
    subCategories?: Array<Category> | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof Category
     */
    products?: Array<Product> | null;
}

/**
 * Check if a given object implements the Category interface.
 */
export function instanceOfCategory(value: object): value is Category {
    return true;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'modifiedDate': json['modifiedDate'] == null ? undefined : (new Date(json['modifiedDate'])),
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'parentCategoryId': json['parentCategoryId'] == null ? undefined : json['parentCategoryId'],
        'parentCategory': json['parentCategory'] == null ? undefined : CategoryFromJSON(json['parentCategory']),
        'subCategories': json['subCategories'] == null ? undefined : ((json['subCategories'] as Array<any>).map(CategoryFromJSON)),
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(ProductFromJSON)),
    };
}

export function CategoryToJSON(json: any): Category {
    return CategoryToJSONTyped(json, false);
}

export function CategoryToJSONTyped(value?: Category | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdDate': value['createdDate'] == null ? undefined : ((value['createdDate']).toISOString()),
        'modifiedDate': value['modifiedDate'] == null ? undefined : ((value['modifiedDate'] as any).toISOString()),
        'name': value['name'],
        'description': value['description'],
        'parentCategoryId': value['parentCategoryId'],
        'parentCategory': CategoryToJSON(value['parentCategory']),
        'subCategories': value['subCategories'] == null ? undefined : ((value['subCategories'] as Array<any>).map(CategoryToJSON)),
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(ProductToJSON)),
    };
}

