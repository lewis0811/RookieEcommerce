/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductCommand,
  ProblemDetails,
  ProductCreateDto,
  ProductDetailsDto,
  ProductDetailsDtoPaginationList,
  UpdateProductCommand,
} from '../models/index';
import {
    CreateProductCommandFromJSON,
    CreateProductCommandToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ProductCreateDtoFromJSON,
    ProductCreateDtoToJSON,
    ProductDetailsDtoFromJSON,
    ProductDetailsDtoToJSON,
    ProductDetailsDtoPaginationListFromJSON,
    ProductDetailsDtoPaginationListToJSON,
    UpdateProductCommandFromJSON,
    UpdateProductCommandToJSON,
} from '../models/index';

export interface ApiV1ProductsGetRequest {
    categoryId?: string;
    maxPrice?: number;
    minPrice?: number;
    isIncludeItems?: boolean;
    pageNumber?: number;
    pageSize?: number;
    searchTerm?: string;
    sortBy?: string;
    includeProperties?: string;
}

export interface ApiV1ProductsPostRequest {
    createProductCommand?: CreateProductCommand;
}

export interface ApiV1ProductsProductIdDeleteRequest {
    productId: string;
}

export interface ApiV1ProductsProductIdGetRequest {
    productId: string;
    isIncludeItems?: boolean;
}

export interface ApiV1ProductsProductIdPutRequest {
    productId: string;
    updateProductCommand?: UpdateProductCommand;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1ProductsGetRaw(requestParameters: ApiV1ProductsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDetailsDtoPaginationList>> {
        const queryParameters: any = {};

        if (requestParameters['categoryId'] != null) {
            queryParameters['CategoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['MaxPrice'] = requestParameters['maxPrice'];
        }

        if (requestParameters['minPrice'] != null) {
            queryParameters['MinPrice'] = requestParameters['minPrice'];
        }

        if (requestParameters['isIncludeItems'] != null) {
            queryParameters['IsIncludeItems'] = requestParameters['isIncludeItems'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['SearchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['SortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['includeProperties'] != null) {
            queryParameters['IncludeProperties'] = requestParameters['includeProperties'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDetailsDtoPaginationListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductsGet(requestParameters: ApiV1ProductsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDetailsDtoPaginationList> {
        const response = await this.apiV1ProductsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductsPostRaw(requestParameters: ApiV1ProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCreateDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductCommandToJSON(requestParameters['createProductCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCreateDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductsPost(requestParameters: ApiV1ProductsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCreateDto> {
        const response = await this.apiV1ProductsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductsProductIdDeleteRaw(requestParameters: ApiV1ProductsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling apiV1ProductsProductIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/products/{product-id}`.replace(`{${"product-id"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductsProductIdDelete(requestParameters: ApiV1ProductsProductIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductsProductIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductsProductIdGetRaw(requestParameters: ApiV1ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDetailsDto>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling apiV1ProductsProductIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isIncludeItems'] != null) {
            queryParameters['isIncludeItems'] = requestParameters['isIncludeItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/products/{product-id}`.replace(`{${"product-id"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductsProductIdGet(requestParameters: ApiV1ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDetailsDto> {
        const response = await this.apiV1ProductsProductIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductsProductIdPutRaw(requestParameters: ApiV1ProductsProductIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling apiV1ProductsProductIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/products/{product-id}`.replace(`{${"product-id"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductCommandToJSON(requestParameters['updateProductCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductsProductIdPut(requestParameters: ApiV1ProductsProductIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductsProductIdPutRaw(requestParameters, initOverrides);
    }

}
