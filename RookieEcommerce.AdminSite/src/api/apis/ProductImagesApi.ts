/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductImageCommand,
  ProblemDetails,
  ProductImageCreateDto,
  ProductImageDetailsDto,
  ProductImageDetailsDtoPaginationList,
  UpdateProductImageCommand,
} from '../models/index';
import {
    CreateProductImageCommandFromJSON,
    CreateProductImageCommandToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ProductImageCreateDtoFromJSON,
    ProductImageCreateDtoToJSON,
    ProductImageDetailsDtoFromJSON,
    ProductImageDetailsDtoToJSON,
    ProductImageDetailsDtoPaginationListFromJSON,
    ProductImageDetailsDtoPaginationListToJSON,
    UpdateProductImageCommandFromJSON,
    UpdateProductImageCommandToJSON,
} from '../models/index';

export interface ApiV1ProductImagesGetRequest {
    productId?: string;
    isPrimary?: boolean;
    pageNumber?: number;
    pageSize?: number;
    searchTerm?: string;
    sortBy?: string;
    includeProperties?: string;
}

export interface ApiV1ProductImagesImageIdDeleteRequest {
    imageId: string;
}

export interface ApiV1ProductImagesImageIdGetRequest {
    imageId: string;
}

export interface ApiV1ProductImagesImageIdPutRequest {
    imageId: string;
    updateProductImageCommand?: UpdateProductImageCommand;
}

export interface ApiV1ProductImagesPostRequest {
    createProductImageCommand?: CreateProductImageCommand;
}

/**
 * 
 */
export class ProductImagesApi extends runtime.BaseAPI {

    /**
     */
    async apiV1ProductImagesGetRaw(requestParameters: ApiV1ProductImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductImageDetailsDtoPaginationList>> {
        const queryParameters: any = {};

        if (requestParameters['productId'] != null) {
            queryParameters['ProductId'] = requestParameters['productId'];
        }

        if (requestParameters['isPrimary'] != null) {
            queryParameters['IsPrimary'] = requestParameters['isPrimary'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['SearchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['SortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['includeProperties'] != null) {
            queryParameters['IncludeProperties'] = requestParameters['includeProperties'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-images`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductImageDetailsDtoPaginationListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductImagesGet(requestParameters: ApiV1ProductImagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductImageDetailsDtoPaginationList> {
        const response = await this.apiV1ProductImagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductImagesImageIdDeleteRaw(requestParameters: ApiV1ProductImagesImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiV1ProductImagesImageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-images/{image-id}`.replace(`{${"image-id"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductImagesImageIdDelete(requestParameters: ApiV1ProductImagesImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductImagesImageIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductImagesImageIdGetRaw(requestParameters: ApiV1ProductImagesImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductImageDetailsDto>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiV1ProductImagesImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-images/{image-id}`.replace(`{${"image-id"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductImageDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductImagesImageIdGet(requestParameters: ApiV1ProductImagesImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductImageDetailsDto> {
        const response = await this.apiV1ProductImagesImageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductImagesImageIdPutRaw(requestParameters: ApiV1ProductImagesImageIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiV1ProductImagesImageIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-images/{image-id}`.replace(`{${"image-id"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductImageCommandToJSON(requestParameters['updateProductImageCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductImagesImageIdPut(requestParameters: ApiV1ProductImagesImageIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductImagesImageIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductImagesPostRaw(requestParameters: ApiV1ProductImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductImageCreateDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductImageCommandToJSON(requestParameters['createProductImageCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductImageCreateDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductImagesPost(requestParameters: ApiV1ProductImagesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductImageCreateDto> {
        const response = await this.apiV1ProductImagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
