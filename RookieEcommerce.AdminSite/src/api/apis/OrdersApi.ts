/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrderCommand,
  UpdateOrderCommand,
} from '../models/index';
import {
    CreateOrderCommandFromJSON,
    CreateOrderCommandToJSON,
    UpdateOrderCommandFromJSON,
    UpdateOrderCommandToJSON,
} from '../models/index';

export interface ApiV1OrdersCustomerCustomerIdGetRequest {
    customerId: string;
    isIncludeItems?: boolean;
}

export interface ApiV1OrdersOrderIdDeleteRequest {
    orderId: string;
}

export interface ApiV1OrdersOrderIdPutRequest {
    orderId: string;
    updateOrderCommand?: UpdateOrderCommand;
}

export interface ApiV1OrdersPostRequest {
    createOrderCommand?: CreateOrderCommand;
}

/**
 * 
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     */
    async apiV1OrdersCustomerCustomerIdGetRaw(requestParameters: ApiV1OrdersCustomerCustomerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling apiV1OrdersCustomerCustomerIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isIncludeItems'] != null) {
            queryParameters['isIncludeItems'] = requestParameters['isIncludeItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/orders/customer/{customer-id}`.replace(`{${"customer-id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1OrdersCustomerCustomerIdGet(requestParameters: ApiV1OrdersCustomerCustomerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrdersCustomerCustomerIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1OrdersOrderIdDeleteRaw(requestParameters: ApiV1OrdersOrderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling apiV1OrdersOrderIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/orders/{order-id}`.replace(`{${"order-id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1OrdersOrderIdDelete(requestParameters: ApiV1OrdersOrderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrdersOrderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1OrdersOrderIdPutRaw(requestParameters: ApiV1OrdersOrderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling apiV1OrdersOrderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/orders/{order-id}`.replace(`{${"order-id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrderCommandToJSON(requestParameters['updateOrderCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1OrdersOrderIdPut(requestParameters: ApiV1OrdersOrderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrdersOrderIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1OrdersPostRaw(requestParameters: ApiV1OrdersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderCommandToJSON(requestParameters['createOrderCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1OrdersPost(requestParameters: ApiV1OrdersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrdersPostRaw(requestParameters, initOverrides);
    }

}
