/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateVariantCommand,
  ProblemDetails,
  ProductDetailsDto,
  ProductVariantCreateDto,
  ProductVariantDetailsDtoPaginationList,
  UpdateVariantCommand,
} from '../models/index';
import {
    CreateVariantCommandFromJSON,
    CreateVariantCommandToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ProductDetailsDtoFromJSON,
    ProductDetailsDtoToJSON,
    ProductVariantCreateDtoFromJSON,
    ProductVariantCreateDtoToJSON,
    ProductVariantDetailsDtoPaginationListFromJSON,
    ProductVariantDetailsDtoPaginationListToJSON,
    UpdateVariantCommandFromJSON,
    UpdateVariantCommandToJSON,
} from '../models/index';

export interface ApiV1ProductVariantsGetRequest {
    productId?: string;
    variantType?: string;
    minPrice?: number;
    maxPrice?: number;
    pageNumber?: number;
    pageSize?: number;
    searchTerm?: string;
    sortBy?: string;
    includeProperties?: string;
}

export interface ApiV1ProductVariantsPostRequest {
    createVariantCommand?: CreateVariantCommand;
}

export interface ApiV1ProductVariantsVariantIdDeleteRequest {
    variantId: string;
}

export interface ApiV1ProductVariantsVariantIdGetRequest {
    variantId: string;
    isIncludeItems?: boolean;
}

export interface ApiV1ProductVariantsVariantIdPutRequest {
    variantId: string;
    updateVariantCommand?: UpdateVariantCommand;
}

/**
 * 
 */
export class ProductVariantsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1ProductVariantsGetRaw(requestParameters: ApiV1ProductVariantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariantDetailsDtoPaginationList>> {
        const queryParameters: any = {};

        if (requestParameters['productId'] != null) {
            queryParameters['ProductId'] = requestParameters['productId'];
        }

        if (requestParameters['variantType'] != null) {
            queryParameters['VariantType'] = requestParameters['variantType'];
        }

        if (requestParameters['minPrice'] != null) {
            queryParameters['MinPrice'] = requestParameters['minPrice'];
        }

        if (requestParameters['maxPrice'] != null) {
            queryParameters['MaxPrice'] = requestParameters['maxPrice'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['SearchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['SortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['includeProperties'] != null) {
            queryParameters['IncludeProperties'] = requestParameters['includeProperties'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-variants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariantDetailsDtoPaginationListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductVariantsGet(requestParameters: ApiV1ProductVariantsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariantDetailsDtoPaginationList> {
        const response = await this.apiV1ProductVariantsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductVariantsPostRaw(requestParameters: ApiV1ProductVariantsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariantCreateDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-variants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVariantCommandToJSON(requestParameters['createVariantCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariantCreateDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductVariantsPost(requestParameters: ApiV1ProductVariantsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariantCreateDto> {
        const response = await this.apiV1ProductVariantsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductVariantsVariantIdDeleteRaw(requestParameters: ApiV1ProductVariantsVariantIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['variantId'] == null) {
            throw new runtime.RequiredError(
                'variantId',
                'Required parameter "variantId" was null or undefined when calling apiV1ProductVariantsVariantIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-variants/{variant-id}`.replace(`{${"variant-id"}}`, encodeURIComponent(String(requestParameters['variantId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductVariantsVariantIdDelete(requestParameters: ApiV1ProductVariantsVariantIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductVariantsVariantIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductVariantsVariantIdGetRaw(requestParameters: ApiV1ProductVariantsVariantIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDetailsDto>> {
        if (requestParameters['variantId'] == null) {
            throw new runtime.RequiredError(
                'variantId',
                'Required parameter "variantId" was null or undefined when calling apiV1ProductVariantsVariantIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isIncludeItems'] != null) {
            queryParameters['isIncludeItems'] = requestParameters['isIncludeItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-variants/{variant-id}`.replace(`{${"variant-id"}}`, encodeURIComponent(String(requestParameters['variantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductVariantsVariantIdGet(requestParameters: ApiV1ProductVariantsVariantIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDetailsDto> {
        const response = await this.apiV1ProductVariantsVariantIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductVariantsVariantIdPutRaw(requestParameters: ApiV1ProductVariantsVariantIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['variantId'] == null) {
            throw new runtime.RequiredError(
                'variantId',
                'Required parameter "variantId" was null or undefined when calling apiV1ProductVariantsVariantIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-variants/{variant-id}`.replace(`{${"variant-id"}}`, encodeURIComponent(String(requestParameters['variantId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVariantCommandToJSON(requestParameters['updateVariantCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductVariantsVariantIdPut(requestParameters: ApiV1ProductVariantsVariantIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductVariantsVariantIdPutRaw(requestParameters, initOverrides);
    }

}
