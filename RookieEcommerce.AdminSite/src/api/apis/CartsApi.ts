/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCartCommand,
} from '../models/index';
import {
    CreateCartCommandFromJSON,
    CreateCartCommandToJSON,
} from '../models/index';

export interface ApiV1CartsCartIdItemsDeleteRequest {
    cartId: string;
}

export interface ApiV1CartsGetRequest {
    customerId?: string;
    isIncludeItems?: boolean;
}

export interface ApiV1CartsMyCartGetRequest {
    isIncludeItems?: boolean;
}

export interface ApiV1CartsPostRequest {
    createCartCommand?: CreateCartCommand;
}

/**
 * 
 */
export class CartsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1CartsCartIdItemsDeleteRaw(requestParameters: ApiV1CartsCartIdItemsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling apiV1CartsCartIdItemsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/carts/{cart-id}/items`.replace(`{${"cart-id"}}`, encodeURIComponent(String(requestParameters['cartId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1CartsCartIdItemsDelete(requestParameters: ApiV1CartsCartIdItemsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CartsCartIdItemsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1CartsGetRaw(requestParameters: ApiV1CartsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['customerId'] != null) {
            queryParameters['customer-id'] = requestParameters['customerId'];
        }

        if (requestParameters['isIncludeItems'] != null) {
            queryParameters['isIncludeItems'] = requestParameters['isIncludeItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/carts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1CartsGet(requestParameters: ApiV1CartsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CartsGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1CartsMyCartGetRaw(requestParameters: ApiV1CartsMyCartGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['isIncludeItems'] != null) {
            queryParameters['isIncludeItems'] = requestParameters['isIncludeItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/carts/my-cart`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1CartsMyCartGet(requestParameters: ApiV1CartsMyCartGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CartsMyCartGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1CartsPostRaw(requestParameters: ApiV1CartsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/carts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCartCommandToJSON(requestParameters['createCartCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1CartsPost(requestParameters: ApiV1CartsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CartsPostRaw(requestParameters, initOverrides);
    }

}
