/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductRatingCommand,
  ProblemDetails,
  UpdateProductRatingCommand,
} from '../models/index';
import {
    CreateProductRatingCommandFromJSON,
    CreateProductRatingCommandToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateProductRatingCommandFromJSON,
    UpdateProductRatingCommandToJSON,
} from '../models/index';

export interface ApiV1ProductRatingsGetRequest {
    productId?: string;
    customerId?: string;
    minRatingValue?: number;
    maxRatingValue?: number;
    isIncludedItems?: boolean;
    pageNumber?: number;
    pageSize?: number;
    searchTerm?: string;
    sortBy?: string;
    includeProperties?: string;
}

export interface ApiV1ProductRatingsPostRequest {
    createProductRatingCommand?: CreateProductRatingCommand;
}

export interface ApiV1ProductRatingsRatingIdDeleteRequest {
    ratingId: string;
    ratingId2: string;
}

export interface ApiV1ProductRatingsRatingIdGetRequest {
    ratingId: string;
    isIncludedItems?: boolean;
}

export interface ApiV1ProductRatingsRatingIdPutRequest {
    ratingId: string;
    updateProductRatingCommand?: UpdateProductRatingCommand;
}

/**
 * 
 */
export class ProductRatingsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1ProductRatingsGetRaw(requestParameters: ApiV1ProductRatingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['productId'] != null) {
            queryParameters['ProductId'] = requestParameters['productId'];
        }

        if (requestParameters['customerId'] != null) {
            queryParameters['CustomerId'] = requestParameters['customerId'];
        }

        if (requestParameters['minRatingValue'] != null) {
            queryParameters['MinRatingValue'] = requestParameters['minRatingValue'];
        }

        if (requestParameters['maxRatingValue'] != null) {
            queryParameters['MaxRatingValue'] = requestParameters['maxRatingValue'];
        }

        if (requestParameters['isIncludedItems'] != null) {
            queryParameters['IsIncludedItems'] = requestParameters['isIncludedItems'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['SearchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['SortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['includeProperties'] != null) {
            queryParameters['IncludeProperties'] = requestParameters['includeProperties'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-ratings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductRatingsGet(requestParameters: ApiV1ProductRatingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductRatingsGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductRatingsPostRaw(requestParameters: ApiV1ProductRatingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-ratings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductRatingCommandToJSON(requestParameters['createProductRatingCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductRatingsPost(requestParameters: ApiV1ProductRatingsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductRatingsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductRatingsRatingIdDeleteRaw(requestParameters: ApiV1ProductRatingsRatingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling apiV1ProductRatingsRatingIdDelete().'
            );
        }

        if (requestParameters['ratingId2'] == null) {
            throw new runtime.RequiredError(
                'ratingId2',
                'Required parameter "ratingId2" was null or undefined when calling apiV1ProductRatingsRatingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-ratings/{rating-id}`.replace(`{${"ratingId"}}`, encodeURIComponent(String(requestParameters['ratingId']))).replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId2']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductRatingsRatingIdDelete(requestParameters: ApiV1ProductRatingsRatingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductRatingsRatingIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductRatingsRatingIdGetRaw(requestParameters: ApiV1ProductRatingsRatingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling apiV1ProductRatingsRatingIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isIncludedItems'] != null) {
            queryParameters['isIncludedItems'] = requestParameters['isIncludedItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-ratings/{rating-id}`.replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductRatingsRatingIdGet(requestParameters: ApiV1ProductRatingsRatingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductRatingsRatingIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1ProductRatingsRatingIdPutRaw(requestParameters: ApiV1ProductRatingsRatingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling apiV1ProductRatingsRatingIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/product-ratings/{rating-id}`.replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductRatingCommandToJSON(requestParameters['updateProductRatingCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1ProductRatingsRatingIdPut(requestParameters: ApiV1ProductRatingsRatingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1ProductRatingsRatingIdPutRaw(requestParameters, initOverrides);
    }

}
