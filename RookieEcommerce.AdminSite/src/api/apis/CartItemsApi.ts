/* tslint:disable */
/* eslint-disable */
/**
 * NashLux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCartItemCommand,
  UpdateCartItemCommand,
} from '../models/index';
import {
    CreateCartItemCommandFromJSON,
    CreateCartItemCommandToJSON,
    UpdateCartItemCommandFromJSON,
    UpdateCartItemCommandToJSON,
} from '../models/index';

export interface ApiV1CartsCartIdItemsItemIdDeleteRequest {
    cartId: string;
    itemId: string;
}

export interface ApiV1CartsCartIdItemsItemIdPutRequest {
    cartId: string;
    itemId: string;
    updateCartItemCommand?: UpdateCartItemCommand;
}

export interface ApiV1CartsCartIdItemsPostRequest {
    cartId: string;
    createCartItemCommand?: CreateCartItemCommand;
}

/**
 * 
 */
export class CartItemsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1CartsCartIdItemsItemIdDeleteRaw(requestParameters: ApiV1CartsCartIdItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling apiV1CartsCartIdItemsItemIdDelete().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiV1CartsCartIdItemsItemIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/carts/{cart-id}/items/{item-id}`.replace(`{${"cart-id"}}`, encodeURIComponent(String(requestParameters['cartId']))).replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1CartsCartIdItemsItemIdDelete(requestParameters: ApiV1CartsCartIdItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CartsCartIdItemsItemIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1CartsCartIdItemsItemIdPutRaw(requestParameters: ApiV1CartsCartIdItemsItemIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling apiV1CartsCartIdItemsItemIdPut().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiV1CartsCartIdItemsItemIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/carts/{cart-id}/items/{item-id}`.replace(`{${"cart-id"}}`, encodeURIComponent(String(requestParameters['cartId']))).replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCartItemCommandToJSON(requestParameters['updateCartItemCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1CartsCartIdItemsItemIdPut(requestParameters: ApiV1CartsCartIdItemsItemIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CartsCartIdItemsItemIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1CartsCartIdItemsPostRaw(requestParameters: ApiV1CartsCartIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cartId'] == null) {
            throw new runtime.RequiredError(
                'cartId',
                'Required parameter "cartId" was null or undefined when calling apiV1CartsCartIdItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/carts/{cart-id}/items`.replace(`{${"cart-id"}}`, encodeURIComponent(String(requestParameters['cartId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCartItemCommandToJSON(requestParameters['createCartItemCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1CartsCartIdItemsPost(requestParameters: ApiV1CartsCartIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CartsCartIdItemsPostRaw(requestParameters, initOverrides);
    }

}
